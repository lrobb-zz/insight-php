<?php
/**
 * DailySolarRadiationByAssetData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SkyWise Insight API (Beta)
 *
 * The SkyWise Insight API is an interface to WDT’s Weather as a Service® analytics platform,  allowing application developers to leverage high quality weather information  for applications, and products. The SkyWise Insight API provides access to  historical, current, and forecast data for any region of interest,  such as an agriculture field, urban area, or utility service area.  API response formats can include time-series, summaries, or contours.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * DailySolarRadiationByAssetData Class Doc Comment
 *
 * @category    Class
 * @description Solar Radiation By Asset Response
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DailySolarRadiationByAssetData implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'DailySolarRadiationByAssetData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'asset' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'solar_radiation' => 'double',
        'accumulation_statistics' => '\Swagger\Client\Model\DegreeDaysByAssetDataAccumulationStatistics',
        'unit' => '\Swagger\Client\Model\DegreeDaysByLocationDataUnit',
        'contours' => 'string',
        'series' => '\Swagger\Client\Model\DailyAssetSeries[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'asset' => null,
        'start_date' => 'date',
        'end_date' => 'date',
        'solar_radiation' => 'double',
        'accumulation_statistics' => null,
        'unit' => null,
        'contours' => null,
        'series' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'asset' => 'asset',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'solar_radiation' => 'solarRadiation',
        'accumulation_statistics' => 'accumulationStatistics',
        'unit' => 'unit',
        'contours' => 'contours',
        'series' => 'series'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'asset' => 'setAsset',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'solar_radiation' => 'setSolarRadiation',
        'accumulation_statistics' => 'setAccumulationStatistics',
        'unit' => 'setUnit',
        'contours' => 'setContours',
        'series' => 'setSeries'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'asset' => 'getAsset',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'solar_radiation' => 'getSolarRadiation',
        'accumulation_statistics' => 'getAccumulationStatistics',
        'unit' => 'getUnit',
        'contours' => 'getContours',
        'series' => 'getSeries'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['asset'] = isset($data['asset']) ? $data['asset'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['solar_radiation'] = isset($data['solar_radiation']) ? $data['solar_radiation'] : null;
        $this->container['accumulation_statistics'] = isset($data['accumulation_statistics']) ? $data['accumulation_statistics'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['contours'] = isset($data['contours']) ? $data['contours'] : null;
        $this->container['series'] = isset($data['series']) ? $data['series'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets asset
     * @return string
     */
    public function getAsset()
    {
        return $this->container['asset'];
    }

    /**
     * Sets asset
     * @param string $asset Link to asset info.
     * @return $this
     */
    public function setAsset($asset)
    {
        $this->container['asset'] = $asset;

        return $this;
    }

    /**
     * Gets start_date
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     * @param \DateTime $start_date
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     * @param \DateTime $end_date
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets solar_radiation
     * @return double
     */
    public function getSolarRadiation()
    {
        return $this->container['solar_radiation'];
    }

    /**
     * Sets solar_radiation
     * @param double $solar_radiation
     * @return $this
     */
    public function setSolarRadiation($solar_radiation)
    {
        $this->container['solar_radiation'] = $solar_radiation;

        return $this;
    }

    /**
     * Gets accumulation_statistics
     * @return \Swagger\Client\Model\DegreeDaysByAssetDataAccumulationStatistics
     */
    public function getAccumulationStatistics()
    {
        return $this->container['accumulation_statistics'];
    }

    /**
     * Sets accumulation_statistics
     * @param \Swagger\Client\Model\DegreeDaysByAssetDataAccumulationStatistics $accumulation_statistics
     * @return $this
     */
    public function setAccumulationStatistics($accumulation_statistics)
    {
        $this->container['accumulation_statistics'] = $accumulation_statistics;

        return $this;
    }

    /**
     * Gets unit
     * @return \Swagger\Client\Model\DegreeDaysByLocationDataUnit
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     * @param \Swagger\Client\Model\DegreeDaysByLocationDataUnit $unit
     * @return $this
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets contours
     * @return string
     */
    public function getContours()
    {
        return $this->container['contours'];
    }

    /**
     * Sets contours
     * @param string $contours Link to contours for this query.
     * @return $this
     */
    public function setContours($contours)
    {
        $this->container['contours'] = $contours;

        return $this;
    }

    /**
     * Gets series
     * @return \Swagger\Client\Model\DailyAssetSeries[]
     */
    public function getSeries()
    {
        return $this->container['series'];
    }

    /**
     * Sets series
     * @param \Swagger\Client\Model\DailyAssetSeries[] $series
     * @return $this
     */
    public function setSeries($series)
    {
        $this->container['series'] = $series;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


